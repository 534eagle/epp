; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#pragma option -v+
#pragma verboselevel 9

#define Arch "x64"

;#define Debug

#define AppVersion GetFileVersion(AddBackslash(SourcePath) + "..\pyinst\dist\epp\launcher.exe")
#define SrcRootDir AddBackslash(SourcePath) + "..\src\"
#define InnoRootDir AddBackslash(SourcePath)
#define EyeonScriptPath ExtractFilePath(ReadReg(HKEY_CURRENT_USER, "Software\eyeon\Fusion x64 6.1", "Last Run Path", "C:\Program Files\eyeon\Fusion 6.4\Fusion.exe")) + "\eyeonScript.exe"


[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{92640070-24B2-4099-8E43-33DD589A8063}}
AppName=eyeon production pipeline
AppVersion={#AppVersion}
WizardSmallImageFile={#SrcRootDir}_rc\epp_55.bmp
WizardImageFile={#SrcRootDir}_rc\epp_setup.bmp
UninstallDisplayIcon={#SrcRootDir}_rc\epp_128.ico
SetupIconFile={#SrcRootDir}_rc\epp_128.ico
AppPublisher=eyeon Software Inc.
AppPublisherURL=http://www.eyeonline.com
AppSupportURL=http://www.eyeonline.com
AppUpdatesURL=http://www.eyeonline.com
DefaultDirName=C:\epp
DefaultGroupName=eyeon\epp
AllowNoIcons=yes
ArchitecturesInstallIn64BitMode={#Arch}
LicenseFile={#SrcRootDir}LICENSE
OutputDir={#InnoRootDir}..\dist
OutputBaseFilename=epp_{#Arch}_{#AppVersion}_Setup
Compression=lzma
SolidCompression=yes
ChangesEnvironment=yes

[Registry]
; set EPP_ROOT
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "EPP_ROOT"; ValueData: "{app}"; Tasks:setenv\all; Flags:uninsdeletevalue;
Root: HKCU; Subkey: "Environment"; ValueType: expandsz; ValueName: "EPP_ROOT"; ValueData: "{app}"; Tasks:setenv\user; Flags:uninsdeletevalue;

Root: HKCU; Subkey: "Software\eyeon\epp"; ValueType: string; ValueName: "Version"; ValueData: "{#AppVersion}"; Flags:uninsdeletevalue;
; Only to delete them at uninstall
Root: HKCU; Subkey: "Environment"; ValueType: expandsz; ValueName: "EPP_CURPROJECT"; ValueData: ""; Flags:uninsdeletevalue;
Root: HKCU; Subkey: "Environment"; ValueType: expandsz; ValueName: "EPP_CURSHOT"; ValueData: ""; Flags:uninsdeletevalue;
Root: HKCU; Subkey: "Software\eyeon\epp"; Flags:uninsdeletekey;


[Dirs]
Name: {code:GetDataDir}; Flags: uninsneveruninstall

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[InstallDelete]
Type: filesandordirs; Name: "{app}\bin"; Components: binaries

[Files]
#ifndef Debug
Source: "{#SrcRootDir}epp\_defaults\config.xml"; Components: config; DestDir: "{app}"; Flags: ignoreversion confirmoverwrite
Source: "{#InnoRootDir}..\pyinst\dist\epp\*"; Components: binaries; DestDir: "{app}\bin"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#SrcRootDir}epp\_templates\*"; Components: templates; DestDir: "{app}\templates"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#SrcRootDir}epp\_scripts\fu\*"; Components: connections\fusion; DestDir: "{code:GetScriptFuDir}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#SrcRootDir}epp\_scripts\gen\*"; Components: connections\generation; DestDir: "{code:GetScriptGenDir}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#SrcRootDir}epp\_defaults\formats.xml"; Tasks: formats\default; DestDir: "{app}\templates"; Flags: ignoreversion
#endif

[Tasks]
;Parent Tasks don't use "\"
Name: formats; Components: config templates; Description: Production Formats;
Name: formats\import; Components: config templates; Description: Import Fusion Formats; Flags: exclusive unchecked;
Name: formats\default; Components: config templates; Description: Copy default Formats; Flags: exclusive;
Name: setenv; Description: Set EPP_ROOT environment variable (required);
Name: setenv\all; Description: For all users; Flags: exclusive;
Name: setenv\user; Description: For current user; Flags: exclusive unchecked;

[Types]
Name: "full"; Description: "Full installation";
Name: "client"; Description: "Client installation";
Name: "update"; Description: "Update";
Name: "custom"; Description: "Custom installation"; Flags: iscustom

[Components]
Name: "binaries"; Description: "epp Program Files"; Types: full update custom;
Name: "config"; Description: "Config Files"; Types: full; Flags: disablenouninstallwarning
Name: "templates"; Description: "Templates"; Types: full; Flags: disablenouninstallwarning
Name: "connections"; Description: "Connections"; Types: full update client; Flags: disablenouninstallwarning
Name: "connections\generation"; Description: "Generation Scripts"; Types: full update client; Flags: disablenouninstallwarning
Name: "connections\fusion"; Description: "Fusion Scripts"; Types: full update client; Flags: disablenouninstallwarning
Name: "connections\fusion\menu"; Description: "Fusion Menu Entries (make sure Fusion is running in the background)"; Types: full update client; Flags: disablenouninstallwarning

[Run]
Filename: "{#EyeonScriptPath}"; Components: connections\fusion\menu; Description: "Install Fusion Menus."; Parameters: """{app}\bin\epp_install_menu.eyeonscript"""; Flags: postinstall

[Code]
// ----------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------
var
  ModePage: TInputOptionWizardPage;
  KeyPage: TInputQueryWizardPage;
  ProgressPage: TOutputProgressWizardPage;
  DataDirPage: TInputDirWizardPage;
  ScriptGenDirPage: TInputDirWizardPage;
  ScriptFuDirPage: TInputDirWizardPage;
  FormatsFilePage: TInputFileWizardPage;
  InstallHelpCheckBox: TNewCheckBox;
  MainPage: TWizardPage;  
  hasUserSetDir: boolean;

// ----------------------------------------------------------------------------------------
function LoadValueFromXML(const AFileName, APath: string; ASilent: boolean): string;
var
  XMLNode: Variant;
  XMLDocument: Variant;  
begin
  Result := '';
  XMLDocument := CreateOleObject('Msxml2.DOMDocument.6.0');
  try
    XMLDocument.async := False;
    XMLDocument.load(AFileName);
    if (XMLDocument.parseError.errorCode <> 0) and (ASilent = false)then
      MsgBox('The XML file "' + AFileName + '" could not be parsed. ' + 
        XMLDocument.parseError.reason, mbError, MB_OK)
    else
    begin
      XMLDocument.setProperty('SelectionLanguage', 'XPath');
      XMLNode := XMLDocument.selectSingleNode(APath);
      Result := XMLNode.text;
    end;
  except
    if (ASilent = false) then
    MsgBox('An error occured!'#13#10'Could not parse "'+AFileName+'" for'#13#10+APath, mbError, MB_OK);
  end;
end;

procedure SaveValueToXML(const AFileName, APath, AValue: string);
var
  XMLNode: Variant;
  XMLDocument: Variant;  
begin
  XMLDocument := CreateOleObject('Msxml2.DOMDocument.6.0');
  try
    XMLDocument.async := False;
    XMLDocument.load(AFileName);
    if (XMLDocument.parseError.errorCode <> 0) then
      MsgBox('The XML file could not be parsed. ' + 
        XMLDocument.parseError.reason, mbError, MB_OK)
    else
    begin
      XMLDocument.setProperty('SelectionLanguage', 'XPath');
      XMLNode := XMLDocument.selectSingleNode(APath);
      XMLNode.text := AValue;
      XMLDocument.save(AFileName);
    end;
  except
    MsgBox('An error occured!', mbError, MB_OK);
  end;
end;

function IsUpdate: Boolean;
begin
  Result := ModePage.SelectedValueIndex <> 0;
end;
  
// ----------------------------------------------------------------------------------------
procedure InitializeWizard;
  var
    LabelFolder: TLabel;  
    
    FolderToInstall: TNewEdit; 
begin
  // -------------------------------------------
  ModePage := CreateInputOptionPage(wpLicense,
    'Installtion Mode', 'Please select the kind of setup.',
    'An update needs the EPP_ROOT variable to be set else you will need to specify the paths manually.',
    True, False);
  ModePage.Add('Install');
  

  if (GetEnv('EPP_ROOT') <> '') then begin
    WizardForm.DirEdit.Text := GetEnv('EPP_ROOT');
    ModePage.Add('Update (EPP_ROOT: '+GetEnv('EPP_ROOT')+')');
    ModePage.SelectedValueIndex := 1;
  end else begin
      hasUserSetDir := false;  
      ModePage.Add('Update (EPP_ROOT not found)');
      ModePage.SelectedValueIndex := 0;
  end;

  // -------------------------------------------
  DataDirPage := CreateInputDirPage(wpSelectDir,
    'Select Project Directory', 'Where should Project data live?',
    'Select the folder in which your Projects will live.',
    False, '');
  DataDirPage.Add('');

  // Defaults  
  DataDirPage.Values[0] := GetPreviousData('DataDir', 'C:\projects');

  // -------------------------------------------
  ScriptGenDirPage := CreateInputDirPage(wpSelectComponents,
    'Select Script Directories', 'Where should scripts go?',
    'Select the Generation script folder.',
    False, '');
  ScriptGenDirPage.Add('');
  ScriptGenDirPage.Values[0] := GetPreviousData('ScriptDirGeneration', ExpandConstant('{pf}\eyeon\Generation [AM]\scripts\generation\toolbar'));

  // -------------------------------------------
  ScriptFuDirPage := CreateInputDirPage(ScriptGenDirPage.ID,
    'Select Script Directories', 'Where should scripts go?',
    'Select the Fusion script folder.',
    False, '');
  ScriptFuDirPage.Add('');
  ScriptFuDirPage.Values[0] := GetPreviousData('ScriptDirFusion', ExpandConstant('{commondocs}\eyeon\fusion\Scripts\Comp'));

  // -------------------------------------------
  FormatsFilePage := CreateInputFilePage(wpSelectTasks,
    'Select Fusion Format File', 'Fusion Format File',
    'Select the Fusion Format File (optional).');
  FormatsFilePage.Add('', 'VideoModes File (*.def)|*.def|All files (*.*)|*.*', '*.def');
  FormatsFilePage.Values[0] := GetPreviousData('FormatFile', ExpandConstant('{commonappdata}\eyeon\Fusion\Profiles\Default\VidModes.def'));

end;

// ----------------------------------------------------------------------------------------
procedure RegisterPreviousData(PreviousDataKey: Integer);
begin
  SetPreviousData(PreviousDataKey, 'DataDir', DataDirPage.Values[0]);
  SetPreviousData(PreviousDataKey, 'ScriptDirGeneration', ScriptGenDirPage.Values[0]);
  SetPreviousData(PreviousDataKey, 'ScriptDirFusion', ScriptFuDirPage.Values[0]);
  SetPreviousData(PreviousDataKey, 'FormatFile', FormatsFilePage.Values[0]);
end;

// ----------------------------------------------------------------------------------------
function ShouldSkipPage(PageID: Integer): Boolean;
var
    projectdir: String;
    scriptdir: String;
begin
  // Skip pages that shouldn't be shown
  if (PageID = wpSelectTasks) and (ModePage.SelectedValueIndex <> 0) then
    Result := True
  // Skip directory selection if in update mode
  else if (PageID = DataDirPage.ID) and (ModePage.SelectedValueIndex <> 0) then begin
    projectdir := LoadValueFromXML(AddBackslash(ExpandConstant('{app}') ) + 'config.xml', '//settings/paths/projectdir', true);
    DataDirPage.Values[0] := projectdir;
    Result := projectdir <> ''
  // Need EPP_ROOT - use as default
  end else if (PageID = wpSelectDir) and (ModePage.SelectedValueIndex <> 0) then begin
    if (GetEnv('EPP_ROOT') = '') and (hasUserSetDir = false) then MsgBox('Can not find a valid EPP_ROOT environment variable.', mbError, MB_OK);
    Result := (GetEnv('EPP_ROOT') <> '') and (DirExists(GetEnv('EPP_ROOT')))
  end else if (PageID = ScriptFuDirPage.ID) and (not IsComponentSelected('connections\fusion')) then begin
    Result := True;
  end else if (PageID = ScriptFuDirPage.ID) and (IsComponentSelected('connections\fusion')) then begin
    //  Get from XML on update
    if (ModePage.SelectedValueIndex <> 0) then begin
      if RegQueryStringValue(HKEY_CURRENT_USER, 'Software\eyeon\epp', 'FusionScriptDir', scriptdir) then begin
        // Successfully read the value
        ScriptFuDirPage.Values[0] := scriptdir;
        Result := true
      end else begin
        Result := false
      end;
    end else begin
      Result := False;
    end
  end else if (PageID = ScriptGenDirPage.ID) and (not IsComponentSelected('connections\generation')) then begin
    Result := True;
  end else if (PageID = ScriptGenDirPage.ID) and (IsComponentSelected('connections\generation')) then begin
    //  Get from XML on update
    if (ModePage.SelectedValueIndex <> 0) then begin
      if RegQueryStringValue(HKEY_CURRENT_USER, 'Software\eyeon\epp', 'GenerationScriptDir', scriptdir) then begin
        // Successfully read the value
        ScriptGenDirPage.Values[0] := scriptdir;
        Result := true
      end else begin
        Result := false
      end;
    end else begin
      Result := False;
    end
  // Skip formats of not selected as Task or only updating
  end else if (PageID = FormatsFilePage.ID) and ((not IsTaskSelected('formats\import')) or (ModePage.SelectedValueIndex <> 0)) then begin
    Result := True;
  end else
    Result := False;
end;

// ----------------------------------------------------------------------------------------
function NextButtonClick(PageID: Integer): Boolean;
var
  I: Integer;
begin
  // Validate certain pages before allowing the user to proceed
  if PageID = wpSelectDir then begin
    hasUserSetDir := true;
    Result := true;
  end else if (PageID = ScriptFuDirPage.ID) and (not DirExists(ScriptFuDirPage.Values[0])) then begin
    MsgBox('Directory does not exist.', mbError, MB_OK);
    Result := false
  end else if (PageID = ScriptGenDirPage.ID) and (not DirExists(ScriptGenDirPage.Values[0])) then begin
    MsgBox('Directory does not exist.', mbError, MB_OK);
    Result := false
  end else if (PageID = FormatsFilePage.ID) and (not FileExists(FormatsFilePage.Values[0])) then begin
    MsgBox('File does not exist. '#13#10'You can go back and disable the Import option to use default formats.', mbError, MB_OK);
    Result := false
  end else begin
    Result := true;
  end;
end;

// ----------------------------------------------------------------------------------------
function UpdateReadyMemo(Space, NewLine, MemoUserInfoInfo, MemoDirInfo, MemoTypeInfo,
  MemoComponentsInfo, MemoGroupInfo, MemoTasksInfo: String): String;
var
  S: String;
begin
  { Fill the 'Ready Memo' with the normal settings and the custom settings }
  S := '';

  case ModePage.SelectedValueIndex of
    0: S := S + 'Installation';
    1: S := S + 'Update';
  end;
  S := S + NewLine + NewLine;
  
  S := S + MemoDirInfo + NewLine;
  S := S + Space + DataDirPage.Values[0] + ' (project location)' + NewLine;

  if (IsComponentSelected('connections\generation') or IsComponentSelected('connections\fusion')) then
    S := S + NewLine + 'Scripts:' + NewLine;
  if (IsComponentSelected('connections\generation')) then
     S := S + Space + ScriptGenDirPage.Values[0] + NewLine;  
  if (IsComponentSelected('connections\fusion')) then
     S := S + Space + ScriptFuDirPage.Values[0] + NewLine;  

  if ((IsTaskSelected('formats\import')) and (ModePage.SelectedValueIndex = 0)) then
    S := S + NewLine + 'Import Fusion Format:' + NewLine + Space + FormatsFilePage.Values[0] + NewLine;  

  Result := S;
end;

// ----------------------------------------------------------------------------------------
function GetDataDir(Param: String): String;
begin
  { Return the selected DataDir }
  Result := DataDirPage.Values[0];
end;

// ----------------------------------------------------------------------------------------
function GetScriptFuDir(Param: String): String;
begin
  { Return the selected Dir }
  Result := ScriptFuDirPage.Values[0];
end;

function GetArchCode(): String;
begin
  case ProcessorArchitecture of
    paX86: Result := 'x86';
    paX64: Result := 'x64';
    paIA64: Result := 'ia64';
  else
    Result := '';
  end;
end;

// ----------------------------------------------------------------------------------------
function GetScriptGenDir(Param: String): String;
begin
  { Return the selected Dir }
  Result := ScriptGenDirPage.Values[0];
end;

// ----------------------------------------------------------------------------------------
procedure CurPageChanged(CurPageID: Integer);
begin
  // Default to Update Type on Update
  if CurPageID = wpSelectComponents then
    if (ModePage.SelectedValueIndex <> 0) then
    begin
      WizardForm.TypesCombo.ItemIndex := 2;
      WizardForm.Componentslist.Checked[0] := true;
      WizardForm.Componentslist.Checked[1] := false;
      WizardForm.Componentslist.Checked[2] := false;
    end;
end;

// ----------------------------------------------------------------------------------------
procedure CurStepChanged(CurrentStep: TSetupStep);

  var
    ConfigFilePath: string;
    FormatFilePath: string;
    ResultCode: integer;
begin
  if CurrentStep = ssPostInstall then begin

    // -- Add paths to config.xml
    ConfigFilePath := AddBackslash(ExpandConstant('{app}'))+'config.xml';
    if (FileExists(ConfigFilePath) and IsComponentSelected('config')) then begin
      // Add Project Path
      SaveValueToXML(ConfigFilePath, '//settings/paths/projectdir', DataDirPage.Values[0]);
      // Add Fusion Path
      if IsComponentSelected('connections\fusion') then begin
        //SaveValueToXML(ConfigFilePath, '//settings/paths/fuscriptdir', ScriptFuDirPage.Values[0]);
        RegWriteStringValue(HKEY_CURRENT_USER, 'Software\eyeon\epp', 'FusionScriptDir', ScriptFuDirPage.Values[0]);
      end;
      // Add Generation Path
      if IsComponentSelected('connections\generation') then begin
        //SaveValueToXML(ConfigFilePath, '//settings/paths/genscriptdir', ScriptGenDirPage.Values[0]);
        RegWriteStringValue(HKEY_CURRENT_USER, 'Software\eyeon\epp', 'GenerationScriptDir', ScriptGenDirPage.Values[0]);
      end;
    end;

    // -- Import fusion
    FormatFilePath := FormatsFilePage.Values[0]
    if (FileExists(FormatFilePath) and IsTaskSelected('formats\import')) then begin
  
      if Exec(ExpandConstant('{app}\bin\import_formats.exe'), '"'+FormatFilePath+'" "'+ExpandConstant('{app}\templates\formats.xml')+'"', '', SW_HIDE,
         ewWaitUntilTerminated, ResultCode) then
      begin
        // handle success if necessary; ResultCode contains the exit code
      end
      else begin
        // handle failure if necessary; ResultCode contains the error code
      end;

    end;

    
  end;
end;
